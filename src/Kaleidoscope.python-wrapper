#include <boost/python.hpp>

#include "layers.h"
#include <stdint.h>

using namespace boost::python;

BOOST_PYTHON_MODULE(kaleidoscope)
{
   #define EXPORT_STATIC_METHOD(NAME) \
      .def(#NAME, &Layer_::NAME).staticmethod(#NAME)
      
    class_<Layer_>("Layer")
      EXPORT_STATIC_METHOD(lookup)
      EXPORT_STATIC_METHOD(lookupOnActiveLayer)
      EXPORT_STATIC_METHOD(on)
      EXPORT_STATIC_METHOD(off)
      EXPORT_STATIC_METHOD(move)
      EXPORT_STATIC_METHOD(top)
      EXPORT_STATIC_METHOD(next)
      EXPORT_STATIC_METHOD(previous)
      EXPORT_STATIC_METHOD(isOn)
      EXPORT_STATIC_METHOD(getLayerState)
      EXPORT_STATIC_METHOD(eventHandler)
      EXPORT_STATIC_METHOD(getKeyFromPROGMEM)
      EXPORT_STATIC_METHOD(updateLiveCompositeKeymap)
      EXPORT_STATIC_METHOD(updateActiveLayers)
      
      // As there are two overloaded versions of 
      // defaultLayer that are actually a getter and a setter, we have 
      // to point the compiler to the different versions of the functions
      // by casting to the different function pointer types
      //
      .def("getDefaultLayer", static_cast< 
            uint8_t(*)()
         >(&Layer_::defaultLayer)
      ).staticmethod("getDefaultLayer")
      .def("setDefaultLayer", static_cast< 
            void(*)(uint8_t)
         >(&Layer_::defaultLayer)
      ).staticmethod("setDefaultLayer")
    ;
}